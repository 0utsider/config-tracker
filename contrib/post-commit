#!/bin/bash
#
# Post-commit email hook for git.
#
# dsimmons@squiz.co.uk
# 2011-08-16
#

IFS=$'\n'

files=$(git diff --name-only HEAD^1)


#
# Checks if any of the committed files matched the file filter pattern
#
check_file_sensitive() {

	filterpattern="$(git config hooks.emailfilesensitive)"
	[ -z "$filterpattern" ] && return 0

	for file in $files; do [[ "$file" =~ $filterpattern ]] && return 1; done

	return 0
}

#
# Generates the email to send
#
generate_email() {

	email_header_to="$(git config hooks.mailinglist)"
	email_header_subject="$(git config hooks.emailprefix) $(hostname) commit: $(git rev-parse --short HEAD) - $files"

	if check_file_sensitive; then
		email_body="$(git log -1 -p)"
	else
		# Some files match the sensitive files pattern, so supress the diff
		email_body="$(git log -1)"$'\n'$'\n'"[Diff suppressed, as some committed files may be sensitive.]"
	fi

	cat <<-EOF
	To: $email_header_to
	Subject: $email_header_subject
	
	$email_body
	EOF
}

#
# Checks if any of the committed files matched the file filter pattern
#
check_file_filter() {

	filterpattern="$(git config hooks.emailfilefilter)"
	[ -z "$filterpattern" ] && return 0

	for file in $files; do

		# Abort if file matches filter pattern
		[[ "$file" =~ $filterpattern ]] && return 1

	done

	return 0
}

#
# Truncates the specified text to the number of lines in the git config
#
truncate_max() {

	notification_emails_maxlines="$(git config hooks.emailmaxlines)"
	if [ -z "$notification_emails_maxlines" ]; then
		cat -
	else

		c=0
		skipped=0
		while IFS="" read -r line; do
			c=$((c + 1))
			[ ! $c -gt $notification_emails_maxlines ] && echo "$line" || skipped=$((skipped + 1))
		done

		if [ $skipped -gt 0 ]; then
			echo ""
			echo "[$skipped lines truncated. Run \`git show\` on the target repo for the full message again.]"
		fi
	fi
}

# Silently exit if a filename matched the filter pattern
check_file_filter || exit

# Send email
generate_email | truncate_max | /usr/sbin/sendmail -t
